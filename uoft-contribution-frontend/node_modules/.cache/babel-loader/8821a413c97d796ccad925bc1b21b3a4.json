{"ast":null,"code":"var _jsxFileName = \"/Users/hongxu/Documents/ECE444/ECE444-project-Frontend/src/components/Login.js\";\nimport React, { Component } from 'react';\nimport { Modal, Button, Form } from 'react-bootstrap';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport Axios from 'axios';\nimport { URL, TOKEN_KEY, ID, PASSWORD } from '../constants';\n\nclass Login extends Component {\n  constructor(...args) {\n    super(...args);\n    this.RegisterSchema = yup.object({\n      email: yup.string().email('Invalid email address').required('Email is required'),\n      password: yup.string().required('Password is required'),\n      confirm_password: yup.string().oneOf([yup.ref('password'), null], \"Password does not match\").required('Password confirm is required')\n    });\n    this.LoginSchema = yup.object({\n      email: yup.string().email('Invalid email address').required('Email is required'),\n      password: yup.string().required('Password is required')\n    });\n\n    this.switchToRegister = () => {\n      this.props.showLoginForm(false);\n      this.props.showRegisterForm(true);\n    };\n\n    this.switchToLogin = () => {\n      this.props.showRegisterForm(false);\n      this.props.showLoginForm(true);\n    };\n\n    this.hideRegisterForm = () => {\n      this.props.showRegisterForm(false);\n    };\n\n    this.hideLoginForm = () => {\n      this.props.showLoginForm(false);\n    };\n\n    this.handleSubmitLogin = (event, {\n      setSubmitting\n    }) => {\n      console.log(\"I'm in Login\");\n      const url = `${URL}/users/login`;\n      Axios({\n        method: 'POST',\n        url: url,\n        data: {\n          email: event.email,\n          password: event.password\n        }\n      }).then(response => {\n        console.log(\"Response is: \", response);\n\n        if (response.data.status === \"success\") {\n          // localStorage.setItem(TOKEN_KEY, response.data.token);\n          localStorage.setItem(ID, event.email);\n          alert(\"Login Success\");\n          this.props.loggedIn();\n          this.props.showLoginForm(false);\n        } else {\n          if (response.data.message === \"Username does not exist\") {\n            alert(\"Username does not exist\");\n          } else if (response.data.message === \"Password not matched\") {\n            alert(\"Wrong password\");\n          }\n\n          console.log(\"Login failed\");\n        }\n\n        setSubmitting(false);\n      }).catch(err => {\n        console.log(\"Login failed\");\n      });\n    };\n\n    this.handleSubmitRegister = event => {\n      console.log(\"I'm in register\");\n      const url = `${URL}/users/register`;\n      Axios({\n        method: 'POST',\n        url: url,\n        data: {\n          email: event.email,\n          password: event.password,\n          userName: event.userName\n        }\n      }).then(response => {\n        if (response.data.status === \"success\") {\n          this.switchToLogin();\n        } else {\n          if (response.data.message === \"Username already exists\") {\n            alert(\"This email has been registered. Please log in\");\n          }\n        }\n      }).catch(response => {\n        console.log('failed');\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \".login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      show: this.props.isLoginForm,\n      onHide: this.hideLoginForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 18\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      closeButton: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 25\n      }\n    }, \"Sign In\")), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Formik, {\n      validationSchema: this.LoginSchema,\n      onSubmit: this.handleSubmitLogin,\n      initialValues: {\n        email: '',\n        password: ''\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 25\n      }\n    }, ({\n      handleSubmit,\n      handleChange,\n      touched,\n      errors\n    }) => /*#__PURE__*/React.createElement(Form, {\n      noValidate: true,\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formBasicEmail\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 41\n      }\n    }, \"Email address\"), /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"email\",\n      placeholder: \"Enter email\",\n      name: \"email\",\n      onChange: handleChange,\n      isInvalid: !!errors.email && touched.email,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(Form.Control.Feedback, {\n      type: \"invalid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 41\n      }\n    }, errors.email)), /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formBasicPassword\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 41\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"password\",\n      placeholder: \"Password\",\n      name: \"password\",\n      onChange: handleChange,\n      isInvalid: !!errors.password && touched.password,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(Form.Control.Feedback, {\n      type: \"invalid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 41\n      }\n    }, errors.password)), /*#__PURE__*/React.createElement(Button, {\n      size: \"sm\",\n      block: \"true\",\n      variant: \"link\",\n      onClick: this.switchToRegister,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 37\n      }\n    }, \"Not registered? Sign up\"), \" \", ' ', /*#__PURE__*/React.createElement(Button, {\n      block: \"true\",\n      className: \"Submit_Buttom\",\n      variant: \"primary\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 37\n      }\n    }, \"Log in\"))))), /*#__PURE__*/React.createElement(Modal, {\n      show: this.props.isRegisterForm,\n      onHide: this.hideRegisterForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 18\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      closeButton: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 25\n      }\n    }, \"Register\")), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Formik, {\n      validationSchema: this.RegisterSchema,\n      onSubmit: this.handleSubmitRegister,\n      initialValues: {\n        email: '',\n        password: '',\n        confirm_password: ''\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 25\n      }\n    }, ({\n      handleSubmit,\n      handleChange,\n      touched,\n      errors\n    }) => /*#__PURE__*/React.createElement(Form, {\n      noValidate: true,\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formUserName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 41\n      }\n    }, \"Email Address\"), /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"email\",\n      placeholder: \"Enter email\",\n      name: \"email\",\n      onChange: handleChange,\n      isInvalid: !!errors.email && touched.email,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(Form.Text, {\n      className: \"text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 41\n      }\n    }, \"We'll never share your email with anyone else.\"), /*#__PURE__*/React.createElement(Form.Control.Feedback, {\n      type: \"invalid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 41\n      }\n    }, errors.email)), /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formBasicEmail\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 41\n      }\n    }, \"UserName\"), /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"text\",\n      placeholder: \"UserName\",\n      name: \"userName\",\n      onChange: handleChange,\n      isInvalid: !!errors.userName && touched.userName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(Form.Control.Feedback, {\n      type: \"invalid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 41\n      }\n    }, errors.userName)), /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formBasicPassword\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 41\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"password\",\n      placeholder: \"Password\",\n      name: \"password\",\n      onChange: handleChange,\n      isInvalid: !!errors.password && touched.password,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(Form.Control.Feedback, {\n      type: \"invalid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 41\n      }\n    }, errors.password)), /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formConfirmPassword\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 41\n      }\n    }, \"Confirm Password\"), /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"password\",\n      placeholder: \"Password\",\n      name: \"confirm_password\",\n      onChange: handleChange,\n      isInvalid: !!errors.confirm_password && touched.confirm_password,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(Form.Control.Feedback, {\n      type: \"invalid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 41\n      }\n    }, errors.confirm_password)), /*#__PURE__*/React.createElement(Button, {\n      size: \"sm\",\n      block: \"true\",\n      variant: \"link\",\n      onClick: this.switchToLogin,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 37\n      }\n    }, \"Already Registered? Log in\"), \" \", ' ', /*#__PURE__*/React.createElement(Button, {\n      block: \"true\",\n      className: \"Submit_Buttom\",\n      variant: \"primary\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 37\n      }\n    }, \"Join Us!\"))))));\n  }\n\n}\n\nexport default Login;","map":{"version":3,"sources":["/Users/hongxu/Documents/ECE444/ECE444-project-Frontend/src/components/Login.js"],"names":["React","Component","Modal","Button","Form","Formik","yup","Axios","URL","TOKEN_KEY","ID","PASSWORD","Login","RegisterSchema","object","email","string","required","password","confirm_password","oneOf","ref","LoginSchema","switchToRegister","props","showLoginForm","showRegisterForm","switchToLogin","hideRegisterForm","hideLoginForm","handleSubmitLogin","event","setSubmitting","console","log","url","method","data","then","response","status","localStorage","setItem","alert","loggedIn","message","catch","err","handleSubmitRegister","userName","render","isLoginForm","handleSubmit","handleChange","touched","errors","isRegisterForm"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { Modal, Button, Form } from 'react-bootstrap'\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport Axios from 'axios';\nimport { URL, TOKEN_KEY, ID, PASSWORD} from '../constants';\n\nclass Login extends Component {\n\n    //Schemas used to validate input of form.\n    RegisterSchema = yup.object({\n        email: yup.string().email('Invalid email address').required('Email is required'),\n        password: yup.string().required('Password is required'),\n        confirm_password: yup.string()\n            .oneOf([yup.ref('password'), null], \"Password does not match\")\n            .required('Password confirm is required'),\n    })\n    LoginSchema = yup.object({\n        email: yup.string().email('Invalid email address').required('Email is required'),\n        password: yup.string().required('Password is required'),\n    })\n\n    //When forms close, need to set the state of its parent(App) back to false.\n\n    switchToRegister = () => {\n        this.props.showLoginForm(false);\n        this.props.showRegisterForm(true);\n    }\n\n    switchToLogin = () => {\n        this.props.showRegisterForm(false);\n        this.props.showLoginForm(true);\n    }\n\n    hideRegisterForm = () => {\n        this.props.showRegisterForm(false);\n    };\n\n    hideLoginForm = () => {\n        this.props.showLoginForm(false);\n    }\n\n    //This function is to send the login request message to the back end server with corresponding messages: password, email address\n    //email address should be unique\n    handleSubmitLogin = (event, { setSubmitting }) => {\n        console.log(\"I'm in Login\")\n        const url = `${URL}/users/login`;\n        Axios({\n            method: 'POST',\n            url: url,\n            data: {\n                email: event.email,\n                password: event.password            }\n        })\n            .then(\n                response => {\n                    console.log(\"Response is: \", response)\n                    if (response.data.status === \"success\") {\n                        // localStorage.setItem(TOKEN_KEY, response.data.token);\n                        localStorage.setItem(ID, event.email);\n                        alert(\"Login Success\")\n                        this.props.loggedIn();\n                        this.props.showLoginForm(false);\n                    } else {\n                        if (response.data.message === \"Username does not exist\") {\n                            alert(\"Username does not exist\")\n                        } else if (response.data.message === \"Password not matched\") {\n                            alert(\"Wrong password\")\n                        }\n\n                        console.log(\"Login failed\");\n                    }\n                    setSubmitting(false);\n                }\n            )\n            .catch(\n                err => {\n                    console.log(\"Login failed\");\n                }\n            )\n    }\n\n    //This function is to send the register request message to the back end server with corresponding messages: username, password, email address\n    //email address should be unique\n    handleSubmitRegister = (event) => {\n        console.log(\"I'm in register\")\n        const url = `${URL}/users/register`\n        Axios({\n            method: 'POST',\n            url: url,\n            data: {\n                email: event.email,\n                password: event.password,\n                userName: event.userName\n            }\n        })\n            .then(\n                response => {\n                    if (response.data.status === \"success\") {\n                        this.switchToLogin();\n                    } else {\n                        if (response.data.message === \"Username already exists\") {\n                            alert(\"This email has been registered. Please log in\")\n                        }\n                    }\n                }\n            )\n            .catch(\n                response => {\n                    console.log('failed')\n                }\n            )\n    }\n\n    render() {\n        return (\n            <div className=\".login\">\n                {/* Modal is the pop up window */}\n                {<Modal show={this.props.isLoginForm} onHide={this.hideLoginForm}>\n\n                    <Modal.Header closeButton>\n                        <Modal.Title>Sign In</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        {/* Formik and yup are used to validate input of form */}\n                        <Formik\n                            validationSchema={this.LoginSchema}\n                            onSubmit={this.handleSubmitLogin}\n                            initialValues={{\n                                email: '',\n                                password: '',\n                            }}\n                        >\n                            {/* Form start here */}\n                            {({ handleSubmit,\n                                  handleChange,\n                                  touched,\n                                  errors }) => (<Form noValidate onSubmit={handleSubmit}>\n                                    <Form.Group controlId=\"formBasicEmail\">\n                                        <Form.Label>Email address</Form.Label>\n                                        <Form.Control\n                                            type=\"email\"\n                                            placeholder=\"Enter email\"\n                                            name='email'\n                                            onChange={handleChange}\n                                            isInvalid={!!errors.email && touched.email}\n                                        />\n                                        <Form.Control.Feedback type=\"invalid\">\n                                            {errors.email}\n                                        </Form.Control.Feedback>\n                                    </Form.Group>\n                                    <Form.Group controlId=\"formBasicPassword\">\n                                        <Form.Label>Password</Form.Label>\n                                        <Form.Control\n                                            type=\"password\"\n                                            placeholder=\"Password\"\n                                            name='password'\n                                            onChange={handleChange}\n                                            isInvalid={!!errors.password && touched.password}\n                                        />\n                                        <Form.Control.Feedback type=\"invalid\">\n                                            {errors.password}\n                                        </Form.Control.Feedback>\n                                    </Form.Group>\n\n                                    <Button size=\"sm\" block=\"true\" variant=\"link\" onClick={this.switchToRegister}>\n                                        Not registered? Sign up\n                                    </Button> {' '}\n                                    <Button block=\"true\" className=\"Submit_Buttom\" variant=\"primary\" type=\"submit\">\n                                        Log in\n                                    </Button>\n                                </Form>\n                            )}\n                        </Formik>\n                    </Modal.Body>\n                </Modal>}\n\n                {<Modal show={this.props.isRegisterForm} onHide={this.hideRegisterForm}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Register</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n\n                        <Formik\n                            validationSchema={this.RegisterSchema}\n                            onSubmit={this.handleSubmitRegister}\n                            initialValues={{\n                                email: '',\n                                password: '',\n                                confirm_password: '',\n                            }}\n                        >\n                            {({ handleSubmit,\n                                  handleChange,\n                                  touched,\n                                  errors }) => (<Form noValidate onSubmit={handleSubmit}>\n                                    <Form.Group controlId=\"formUserName\">\n                                        <Form.Label>Email Address</Form.Label>\n                                        <Form.Control\n                                            type=\"email\"\n                                            placeholder=\"Enter email\"\n                                            name='email'\n                                            onChange={handleChange}\n                                            isInvalid={!!errors.email && touched.email}\n                                        />\n                                        <Form.Text className=\"text-muted\">\n                                            We'll never share your email with anyone else.\n                                        </Form.Text>\n                                        <Form.Control.Feedback type=\"invalid\">\n                                            {errors.email}\n                                        </Form.Control.Feedback>\n                                    </Form.Group>\n\n                                    <Form.Group controlId=\"formBasicEmail\">\n                                        <Form.Label>UserName</Form.Label>\n                                        <Form.Control\n                                            type=\"text\"\n                                            placeholder=\"UserName\"\n                                            name='userName'\n                                            onChange={handleChange}\n                                            isInvalid={!!errors.userName && touched.userName}\n                                        />\n                                        <Form.Control.Feedback type=\"invalid\">\n                                            {errors.userName}\n                                        </Form.Control.Feedback>\n                                    </Form.Group>\n\n                                    <Form.Group controlId=\"formBasicPassword\">\n                                        <Form.Label>Password</Form.Label>\n                                        <Form.Control\n                                            type=\"password\"\n                                            placeholder=\"Password\"\n                                            name='password'\n                                            onChange={handleChange}\n                                            isInvalid={!!errors.password && touched.password}\n                                        />\n                                        <Form.Control.Feedback type=\"invalid\">\n                                            {errors.password}\n                                        </Form.Control.Feedback>\n                                    </Form.Group>\n\n                                    <Form.Group controlId=\"formConfirmPassword\">\n                                        <Form.Label>Confirm Password</Form.Label>\n                                        <Form.Control\n                                            type=\"password\"\n                                            placeholder=\"Password\"\n                                            name='confirm_password'\n                                            onChange={handleChange}\n                                            isInvalid={!!errors.confirm_password && touched.confirm_password}\n                                        />\n                                        <Form.Control.Feedback type=\"invalid\">\n                                            {errors.confirm_password}\n                                        </Form.Control.Feedback>\n                                    </Form.Group>\n                                    <Button size=\"sm\" block=\"true\" variant=\"link\" onClick={this.switchToLogin}>\n                                        Already Registered? Log in\n                                    </Button> {' '}\n                                    <Button block=\"true\" className=\"Submit_Buttom\" variant=\"primary\" type=\"submit\">\n                                        Join Us!\n                                    </Button>\n                                </Form>\n                            )}\n                        </Formik>\n                    </Modal.Body>\n                </Modal>}\n\n            </div>\n        );\n    }\n}\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}